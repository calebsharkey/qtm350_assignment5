---
title: "World Development Indicators Analysis"
author: Caleb Sharkey
date: 2/25/2025
format:
  html: default
  pdf: default
bibliography: references.bib
editor: visual
---

```{python}
#!pip install wbgapi

# Import necessary libraries
import pandas as pd
import wbgapi as wb

# Define the indicators to download
indicators = {
    'gdp_per_capita': 'NY.GDP.PCAP.CD',
    'gdp_growth_rate': 'NY.GDP.MKTP.KD.ZG',
    'inflation_rate': 'FP.CPI.TOTL.ZG',
    'unemployment_rate': 'SL.UEM.TOTL.ZS',
    'total_population': 'SP.POP.TOTL',
    'life_expectancy': 'SP.DYN.LE00.IN',
    'adult_literacy_rate': 'SE.ADT.LITR.ZS',
    'income_inequality': 'SI.POV.GINI',
    'health_expenditure_gdp_share': 'SH.XPD.CHEX.GD.ZS',
    'measles_immunisation_rate': 'SH.IMM.MEAS',
    'education_expenditure_gdp_share': 'SE.XPD.TOTL.GD.ZS',
    'primary_school_enrolment_rate': 'SE.PRM.ENRR',
    'exports_gdp_share': 'NE.EXP.GNFS.ZS'
}

# Get country codes for the "World" region
country_codes = wb.region.members('WLD')

# Download data for 2022
df = wb.data.DataFrame(indicators.values(), economy=country_codes, time=2022, skipBlanks=True, labels=True).reset_index()

# Remove 'economy' column if it exists
df = df.drop(columns=['economy'], errors='ignore')

# Rename columns to indicator names
df.rename(columns=lambda x: {v: k for k, v in indicators.items()}.get(x, x).lower(), inplace=True)

# Sort by country and reset index
df = df.sort_values('country').reset_index(drop=True)

# Save to CSV
df.to_csv("wdi.csv", index=False)

# Display dataset info
print(df.info())
print(df.head())
```

## Exploratory Data Analysis (EDA)

Below, I perform EDA on three selected indicators from the dataset: **GDP per Capita**, **Life Expectancy**, and **Unemployment Rate**.

```{python}
# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv("wdi.csv")

# Select three indicators for analysis
selected_columns = ["country", "gdp_per_capita", "life_expectancy", "unemployment_rate"]
df_subset = df[selected_columns]

# Display summary statistics
df_summary = df_subset.describe()
print(df_summary)

# Check for missing values
missing_values = df_subset.isnull().sum()
print("Missing Values:\n", missing_values)

# Plot distributions
fig, axes = plt.subplots(1, 3, figsize=(18, 5))

# GDP per capita distribution
sns.histplot(df_subset["gdp_per_capita"].dropna(), bins=30, ax=axes[0], kde=True)
axes[0].set_title("GDP per Capita Distribution")
axes[0].set_xlabel("GDP per Capita")

# Life Expectancy distribution
sns.histplot(df_subset["life_expectancy"].dropna(), bins=30, ax=axes[1], kde=True)
axes[1].set_title("Life Expectancy Distribution")
axes[1].set_xlabel("Life Expectancy (Years)")

# Unemployment Rate distribution
sns.histplot(df_subset["unemployment_rate"].dropna(), bins=30, ax=axes[2], kde=True)
axes[2].set_title("Unemployment Rate Distribution")
axes[2].set_xlabel("Unemployment Rate (%)")

plt.tight_layout()
plt.show()
```

After running an EDA on this World Bank Indicator data, we have found that the median GDP per capita of countries represented here is just about $7500. The distribution of per capita wealth by country is incredibly skewed with most countries having a GDP less than $7000. We also found the median life exectancy is around 73 years old and the median unemployment rate is 5.3%.

```{python}
#| echo: false

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv("wdi.csv")

# Select three indicators for analysis
selected_columns = ["country", "gdp_per_capita", "life_expectancy", "unemployment_rate"]
df_subset = df[selected_columns]

#| fig-cap: "Scatter Plot: GDP per Capita vs Life Expectancy. Source: World Development Indicators (World Bank)."
#| out.width: "90%"
# Scatter plot for GDP per Capita vs Life Expectancy
plt.figure(figsize=(8, 6))
sns.scatterplot(x=df["gdp_per_capita"], y=df["life_expectancy"])
plt.xlabel("GDP per Capita")
plt.ylabel("Life Expectancy (Years)")
plt.title("GDP per Capita vs Life Expectancy")

# Save figure with a label for cross-referencing
plt.savefig("fig-gdp-lifeexp.png")
plt.show()

#| fig-cap: "Bar Chart: Top 10 Countries with Highest Unemployment Rate. Source: World Development Indicators (World Bank)."
#| fig-width: 8
#| fig-height: 5
#| out.width: "90%"
# Bar chart for the top 10 countries with highest unemployment rate
top_unemployment = df_subset.nlargest(10, "unemployment_rate")

plt.figure(figsize=(8, 5))
sns.barplot(x="unemployment_rate", y="country", data=top_unemployment, palette="viridis")
plt.xlabel("Unemployment Rate (%)")
plt.ylabel("Country")
plt.title("Top 10 Countries with Highest Unemployment Rate")

# Save the figure for cross-referencing
plt.savefig("fig-top-unemployment.png")
plt.show()

# Construct a summary table for key statistics
summary_table = df_subset.agg({
    "gdp_per_capita": ["mean", "median", "min", "max"],
    "life_expectancy": ["mean", "median", "min", "max"],
    "unemployment_rate": ["mean", "median", "min", "max"]
}).T

# Display the table
print(summary_table)
# Convert the summary table to Markdown format (using pipe table format)
md_table = summary_table.to_markdown(tablefmt="pipe")

# Write the Markdown table to a file with a caption and cross-reference label
with open("summary_table.md", "w") as f:
    f.write("Table: Summary of Key Statistics {#tbl-key-stats}\n\n")
    f.write(md_table)
```